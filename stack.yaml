AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: lambda-alb-helloworld

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetsPublic:
    Type: List<AWS::EC2::Subnet::Id>
  BucketName:
    Type: "String"
  TimeoutPeriod:
    Type: "Number"
    Default: 300

Resources:

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_handler.lambda_handler
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref BucketName
        Key: handler.zip
      Description: 'lambda-api-helloworld lambda function'
      Role: !GetAtt LambdaServiceRole.Arn
      Timeout: !Ref TimeoutPeriod

  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      Path: "/"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
          - Key: 'idle_timeout.timeout_seconds'
            Value: !Ref TimeoutPeriod
      Scheme: internet-facing
      Subnets: !Ref SubnetsPublic
      SecurityGroups: [!Ref ALBSecurityGroup]

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaFunctionPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt LambdaFunction.Arn

  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to HTTP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

Outputs:
  EndpointDnsName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
